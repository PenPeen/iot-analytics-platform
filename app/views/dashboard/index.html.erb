<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= @dashboard_title %> - ダッシュボード</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .dashboard {
            display: grid;
            grid-template-columns: 250px 1fr;
            min-height: 100vh;
        }

        .sidebar {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 2rem 1rem;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
        }

        .logo {
            font-size: 1.5rem;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 2rem;
            text-align: center;
        }

        .nav-item {
            padding: 0.75rem 1rem;
            margin: 0.5rem 0;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .nav-item:hover {
            background: rgba(102, 126, 234, 0.1);
            color: #667eea;
        }

        .nav-item.active {
            background: #667eea;
            color: white;
        }

        .main-content {
            padding: 2rem;
            overflow-y: auto;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header p {
            color: #666;
            font-size: 1.1rem;
        }

        .refresh-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            cursor: pointer;
            margin-top: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }

        .refresh-btn:hover {
            background: #5a67d8;
            transform: translateY(-2px);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-icon {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1rem;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: #666;
            font-size: 0.9rem;
        }

        .charts-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .chart-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        .chart-title {
            font-size: 1.2rem;
            font-weight: bold;
            margin-bottom: 1rem;
            color: #333;
        }

        .temperature-chart {
            grid-column: 1 / -1;
        }

        .content-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 1.5rem;
        }

        .device-list {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        .device-item {
            padding: 1rem;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .device-item:last-child {
            border-bottom: none;
        }

        .device-info h4 {
            margin-bottom: 0.25rem;
            color: #333;
        }

        .device-info p {
            color: #666;
            font-size: 0.9rem;
        }

        .device-status {
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .status-active {
            background: #d1fae5;
            color: #065f46;
        }

        .system-health {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        .health-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px solid #eee;
        }

        .health-item:last-child {
            border-bottom: none;
        }

        .health-status {
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
            background: #d1fae5;
            color: #065f46;
        }

        .loading {
            text-align: center;
            padding: 2rem;
            color: #666;
        }

        @media (max-width: 768px) {
            .dashboard {
                grid-template-columns: 1fr;
            }

            .sidebar {
                display: none;
            }

            .stats-grid {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            }

            .charts-grid {
                grid-template-columns: 1fr;
            }

            .content-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="dashboard">
        <aside class="sidebar">
            <div class="logo">IoT Platform</div>
            <nav>
                <div class="nav-item active">
                    <i data-lucide="layout-dashboard"></i>
                    概要
                </div>
                <div class="nav-item">
                    <i data-lucide="cpu"></i>
                    デバイス
                </div>
                <div class="nav-item">
                    <i data-lucide="bar-chart-3"></i>
                    分析
                </div>
                <div class="nav-item">
                    <i data-lucide="bell"></i>
                    アラート
                </div>
                <div class="nav-item">
                    <i data-lucide="settings"></i>
                    設定
                </div>
            </nav>
        </aside>

        <main class="main-content">
            <header class="header">
                <h1 id="main-title"><%= @dashboard_title %></h1>
                <p>リアルタイムでIoTデバイスの状態とセンサーデータを監視</p>
                <button class="refresh-btn" onclick="refreshData()">
                    <i data-lucide="refresh-cw"></i>
                    更新
                </button>
            </header>

            <div id="loading" class="loading">データを読み込み中...</div>
            <div id="dashboard-content" style="display: none;">
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-icon" style="background: linear-gradient(135deg, #667eea, #764ba2);">
                            <i data-lucide="cpu" style="color: white;"></i>
                        </div>
                        <div class="stat-value" id="total-devices">-</div>
                        <div class="stat-label">総デバイス数</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon" style="background: linear-gradient(135deg, #10b981, #059669);">
                            <i data-lucide="activity" style="color: white;"></i>
                        </div>
                        <div class="stat-value" id="active-devices">-</div>
                        <div class="stat-label">アクティブデバイス</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon" style="background: linear-gradient(135deg, #f59e0b, #d97706);">
                            <i data-lucide="database" style="color: white;"></i>
                        </div>
                        <div class="stat-value" id="total-data-points">-</div>
                        <div class="stat-label">総データポイント</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon" style="background: linear-gradient(135deg, #8b5cf6, #7c3aed);">
                            <i data-lucide="clock" style="color: white;"></i>
                        </div>
                        <div class="stat-value" id="last-updated">-</div>
                        <div class="stat-label">最終更新</div>
                    </div>
                </div>

                <div class="charts-grid">
                    <div class="chart-card">
                        <div class="chart-title">時間別データ量</div>
                        <canvas id="hourlyChart"></canvas>
                    </div>
                    <div class="chart-card">
                        <div class="chart-title">デバイス状態</div>
                        <canvas id="statusChart"></canvas>
                    </div>
                </div>

                <div class="chart-card temperature-chart">
                    <div class="chart-title">温度トレンド</div>
                    <canvas id="temperatureChart"></canvas>
                </div>

                <div class="content-grid">
                    <div class="device-list">
                        <h3>デバイス一覧</h3>
                        <div id="device-list-content"></div>
                    </div>
                    <div class="system-health">
                        <h3>システムヘルス</h3>
                        <div id="system-health-content"></div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        // Initialize Lucide icons
        lucide.createIcons();

        let hourlyChart, statusChart, temperatureChart;

        // Load dashboard data
        async function loadDashboardData() {
            try {
                const response = await fetch('/api/dashboard');
                const data = await response.json();

                updateStats(data.overview);
                updateDeviceList(data.devices);
                updateSystemHealth(data.system_health);
                updateCharts(data.charts);

                document.getElementById('loading').style.display = 'none';
                document.getElementById('dashboard-content').style.display = 'block';
            } catch (error) {
                console.error('Error loading dashboard data:', error);
                document.getElementById('loading').innerHTML = 'データの読み込みに失敗しました';
            }
        }

        function updateStats(overview) {
            document.getElementById('total-devices').textContent = overview.total_devices;
            document.getElementById('active-devices').textContent = overview.active_devices;
            document.getElementById('total-data-points').textContent = overview.total_data_points;

            const lastUpdated = new Date(overview.last_updated);
            document.getElementById('last-updated').textContent = lastUpdated.toLocaleTimeString('ja-JP');
        }

        function updateDeviceList(devices) {
            const container = document.getElementById('device-list-content');
            container.innerHTML = '';

            // Get recent device data
            fetch('/api/dashboard')
                .then(response => response.json())
                .then(data => {
                    const recentData = data.recent_data || [];
                    recentData.forEach(item => {
                        const deviceElement = document.createElement('div');
                        deviceElement.className = 'device-item';

                        const dataValues = Object.entries(item.data || {})
                            .map(([key, value]) => `${key}: ${value}`)
                            .join(', ');

                        const timeDiff = new Date() - new Date(item.timestamp);
                        const timeAgo = Math.floor(timeDiff / 60000);
                        const quality = item.quality || 'unknown';

                        deviceElement.innerHTML = `
                            <div class="device-info">
                                <h4>${item.device.name}</h4>
                                <p>${dataValues}</p>
                                <p>品質: ${quality} | ${timeAgo}:${String(Math.floor((timeDiff % 60000) / 1000)).padStart(2, '0')}:${String(timeDiff % 1000).padStart(2, '0')}</p>
                            </div>
                            <div class="device-status status-active">Active</div>
                        `;

                        container.appendChild(deviceElement);
                    });
                });
        }

        function updateSystemHealth(health) {
            const container = document.getElementById('system-health-content');
            container.innerHTML = '';

            Object.entries(health).forEach(([service, status]) => {
                if (service === 'overall_status') return;

                const healthElement = document.createElement('div');
                healthElement.className = 'health-item';
                healthElement.innerHTML = `
                    <span>${service.toUpperCase()}: ${status.message || status}</span>
                    <span class="health-status">Connected</span>
                `;
                container.appendChild(healthElement);
            });
        }

        function updateCharts(charts) {
            // Hourly data chart
            const hourlyCtx = document.getElementById('hourlyChart').getContext('2d');
            if (hourlyChart) hourlyChart.destroy();

            hourlyChart = new Chart(hourlyCtx, {
                type: 'line',
                data: {
                    labels: charts.hourly_data_volume.map(item => item.hour),
                    datasets: [{
                        label: 'データ量',
                        data: charts.hourly_data_volume.map(item => item.count),
                        borderColor: '#667eea',
                        backgroundColor: 'rgba(102, 126, 234, 0.1)',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            // Device status chart
            const statusCtx = document.getElementById('statusChart').getContext('2d');
            if (statusChart) statusChart.destroy();

            statusChart = new Chart(statusCtx, {
                type: 'doughnut',
                data: {
                    labels: charts.device_status_pie.map(item => item.name),
                    datasets: [{
                        data: charts.device_status_pie.map(item => item.value),
                        backgroundColor: charts.device_status_pie.map(item => item.color)
                    }]
                },
                options: {
                    responsive: true
                }
            });

            // Temperature trend chart
            const tempCtx = document.getElementById('temperatureChart').getContext('2d');
            if (temperatureChart) temperatureChart.destroy();

            temperatureChart = new Chart(tempCtx, {
                type: 'line',
                data: {
                    labels: charts.temperature_trend.map(item => item.time),
                    datasets: [{
                        label: '温度 (°C)',
                        data: charts.temperature_trend.map(item => item.temperature),
                        borderColor: '#f59e0b',
                        backgroundColor: 'rgba(245, 158, 11, 0.1)',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function refreshData() {
            document.getElementById('loading').style.display = 'block';
            document.getElementById('dashboard-content').style.display = 'none';
            loadDashboardData();
        }

        // Load data on page load
        document.addEventListener('DOMContentLoaded', loadDashboardData);

        // Auto-refresh every 30 seconds
        setInterval(loadDashboardData, 30000);
    </script>
</body>
</html>
